#include <dirent.h>
#include <vector>

#include <vtkVersion.h>
#include <vtkSmartPointer.h>
#include <vtkPolyData.h>
#include <vtkPolyDataReader.h>
#include <vtkImageData.h>
#include <vtkMetaImageWriter.h>
#include <vtkPolyDataToImageStencil.h>
#include <vtkImageStencil.h>
#include <vtkPointData.h>
#include <string.h>
#include <vtkPolyDataMapper.h>
#include <vtkExtractVOI.h>
#include <vtkMarchingCubes.h>
#include <vtkWindowedSincPolyDataFilter.h>
#include <vtkDataArray.h>
#include <vtkLookupTable.h>
#include <vtkPolyDataNormals.h>
#include <vtkPolyDataWriter.h>
#include <vtkAppendPolyData.h>
#include <vtkCleanPolyData.h>
#include <vtkActor.h>
#include <vtkRenderer.h>
#include <vtkRenderWindow.h>
#include <vtkRenderWindowInteractor.h>
#include <vtkMPIController.h>

#include "/home/users/neto/NaokiEto/openmpi-install/include/mpi.h"
#include <stdio.h>
#include <pthread.h>
#include "/home/users/neto/NaokiEto/vt-install/include/vampirtrace/vt_user.h"
#include <time.h>
#include <stdlib.h>

// holds search results
std::vector<std::string> results;

/**
* This recursive search algorithm function will be used later to find the vtk 
* file in the directory. The user is to place the vtk file in the build 
* directory, and this function will find it and output it.
*/
void search(std::string curr_directory, std::string extension){
	DIR* dir_point = opendir(curr_directory.c_str());
	dirent* entry = readdir(dir_point);

	while (entry){
	    // filename
		std::string fname = entry->d_name;
		// if filename's last characters are extension
		if (fname.find(extension, (fname.length() - extension.length())) != std::string::npos)
            // add filename to results vector
			results.push_back(fname);

		entry = readdir(dir_point);
	}
	return;
}

/**
 * This program converts a vtkPolyData image into volume representation (vtkImageData) 
 * where the foreground voxels are 1 and the background voxels are 0. Internally 
 * vtkPolyDataToImageStencil is utilized. The resultant image is saved to disk in 
 * metaimage file formats.
 */

typedef struct Param_Function
{
    const char *VTKInput;
    int threadId;
    int numThreads;
    vtkPolyData* vtkPiece;
    int mpiRank;
    int mpiSize;
} params;


void* thread_function(void* ptr)
{
    params* NewPtr;
    NewPtr = (params*) ptr;

    int FuncMpiSize = NewPtr->mpiSize;
    int FuncNumThreads = NewPtr->numThreads;
    int FuncThreadId = NewPtr->threadId;
    int FuncMpiRank = NewPtr->mpiRank;

    //VT_ON();
    //VT_USER_START("Region 2");

    vtkPolyDataReader *reader = vtkPolyDataReader::New();
    reader->SetFileName(NewPtr->VTKInput);
    reader->Update();

    //VT_USER_END("Region 2");
    //VT_OFF();

    vtkSmartPointer<vtkImageData> whiteImage = vtkSmartPointer<vtkImageData>::New();    

    //reader->GetOutput()->GetBounds(bounds);
    reader->Update();
    double spacing[3]; // desired volume spacing
    spacing[0] = 0.1;
    spacing[1] = 0.1;
    spacing[2] = 0.1;
    whiteImage->SetSpacing(spacing);

    double bounds[6];
    vtkSmartPointer<vtkMetaImageWriter> writer = vtkSmartPointer<vtkMetaImageWriter>::New();

    // cut the corresponding white image and set the background:
    vtkSmartPointer<vtkImageStencil> imgstenc = vtkSmartPointer<vtkImageStencil>::New();
    reader->Update();

    // take into account that the master thread is not of ID 0
    bounds[0] = -10.0 + 20.0 * double(FuncThreadId + FuncNumThreads * (FuncMpiRank - 1.0)) / double(FuncNumThreads * FuncMpiSize);
    bounds[1] = -10.0 + 20.0 * double(FuncThreadId + FuncNumThreads * (FuncMpiRank - 1.0) + 1.0) / double(FuncNumThreads * FuncMpiSize);
    bounds[2] = -10;
    bounds[3] = 10;
    bounds[4] = -10;
    bounds[5] = 10;

    // compute dimensions
    int dim[3];
    for (int i = 0; i < 3; i++)
    {
    dim[i] = static_cast<int>(ceil((bounds[i * 2 + 1] - bounds[i * 2]) / spacing[i]));
    }
    whiteImage->SetDimensions(dim);
    whiteImage->SetExtent(0, dim[0] - 1, 0, dim[1] - 1, 0, dim[2] - 1);

    double origin[3];
    origin[0] = bounds[0] + spacing[0]/10;
    origin[1] = bounds[2] + spacing[1]/10;
    origin[2] = bounds[4] + spacing[2]/10;
    whiteImage->SetOrigin(origin);

    #if VTK_MAJOR_VERSION <= 5
        whiteImage->SetScalarTypeToUnsignedChar();
        whiteImage->AllocateScalars();
    #else
        whiteImage->AllocateScalars(VTK_UNSIGNED_CHAR,1);
    #endif

    // fill the image with foreground voxels:
    unsigned char inval = 255;
    unsigned char outval = 0;
    vtkIdType count = whiteImage->GetNumberOfPoints();
    for (vtkIdType i = 0; i < count; ++i)
    {
        whiteImage->GetPointData()->GetScalars()->SetTuple1(i, inval);
    }

    // polygonal data --> image stencil:
    vtkSmartPointer<vtkPolyDataToImageStencil> pol2stenc = vtkSmartPointer<vtkPolyDataToImageStencil>::New();

    #if VTK_MAJOR_VERSION <= 5
        pol2stenc->SetInput(reader->GetOutput());
    #else
        pol2stenc->SetInputData(reader->GetOutput());
    #endif

    pol2stenc->SetOutputOrigin(origin);
    pol2stenc->SetOutputSpacing(spacing);
    pol2stenc->SetOutputWholeExtent(whiteImage->GetExtent());
    pol2stenc->Update();

    //imgstenc->Update();
    #if VTK_MAJOR_VERSION <= 5
        imgstenc->SetInput(whiteImage);
        imgstenc->SetStencil(pol2stenc->GetOutput());
    #else
        imgstenc->SetInputData(whiteImage);
        imgstenc->SetStencilConnection(pol2stenc->GetOutputPort());
    #endif

    imgstenc->ReverseStencilOff();
    imgstenc->SetBackgroundValue(outval);
    imgstenc->Update();

    // Pass the meta image data to the vtkMarchingCubes
    vtkExtractVOI *voi = vtkExtractVOI::New(); 
    voi->SetInput(imgstenc->GetOutput());  
    voi->SetSampleRate(1,1,1);

    voi->Update();

    //Prepare surface generation
    vtkMarchingCubes *contour = vtkMarchingCubes::New(); //for label images

    contour->SetInput( voi->GetOutput() );

    // choose one label
    int index = 31;

    contour->SetValue(0, index);
    contour->Update(); //needed for GetNumberOfPolys() !!!

    vtkWindowedSincPolyDataFilter *smoother= vtkWindowedSincPolyDataFilter::New();

    #if VTK_MAJOR_VERSION <= 5
        smoother->SetInput(contour->GetOutput());
    #else
        smoother->SetInputConnection(contour->GetOutputPort());   
    #endif

    smoother->SetNumberOfIterations(30); // this has little effect on the error!
    smoother->NonManifoldSmoothingOn();
    smoother->NormalizeCoordinatesOn();
    smoother->GenerateErrorScalarsOn();
    smoother->Update();

    vtkPolyData *smoothed_polys = smoother->GetOutput();

    // calc cell normal
    vtkPolyDataNormals *triangleCellNormals= vtkPolyDataNormals::New();

    #if VTK_MAJOR_VERSION <= 5
        triangleCellNormals->SetInput(smoothed_polys);
    #else
        triangleCellNormals->SetInputData(smoothed_polys);   
    #endif

    triangleCellNormals->ComputeCellNormalsOn();
    triangleCellNormals->ComputePointNormalsOff();
    triangleCellNormals->ConsistencyOn();
    triangleCellNormals->AutoOrientNormalsOn();
    triangleCellNormals->Update(); // creates vtkPolyData

    #if VTK_MAJOR_VERSION <= 5
        NewPtr->vtkPiece = triangleCellNormals->GetOutput();
    #else
        NewPtr->vtkPiece = triangleCellNormals->GetOutputPort();  
    #endif
}

int main(int argc, char *argv[])
{
    //VT_ON();

    vtkMPIController* controller = vtkMPIController::New();

    double t1 = MPI_Wtime();

    // Initializing MPI
    controller->Initialize(&argc, &argv);

    /* Figure out total amount of processors */
    int MPI_rank = controller->GetLocalProcessId();

    /* Figure out the rank of this processor */
    int MPI_size = controller->GetNumberOfProcesses();

    /* The master process will be of rank 0 */
    int MASTER = 0;

    int i;

    int pthreads_size = atoi(argv[1]);

    // for the joining of threads later on
    void* exit_status;


	pthread_t threads[pthreads_size];

    // this is the input into the function for each thread
    params thread_data_array[pthreads_size];

    //VT_OFF();

    // If not master process, do the vtkMarchingCubes implementation
    if (MPI_rank >= 1)
    {
        //VT_ON();
        //VT_USER_START("START");

        // The file extension to look for is vtk
        std::string extension;
        extension = "vtk";

	    // setup search parameters
	    std::string curr_directory = get_current_dir_name();
	    search(curr_directory, extension);
        std::string result = results[0];

        //VT_USER_END("START");
        //VT_OFF();

	    for (i = 0; i < pthreads_size; i++) {      
            //creating threads
            thread_data_array[i].mpiRank = MPI_rank;
            thread_data_array[i].mpiSize = MPI_size - 1;
	        thread_data_array[i].VTKInput = result.c_str();
            thread_data_array[i].numThreads = pthreads_size;
            thread_data_array[i].threadId = i;
		    pthread_create(&threads[i], NULL, thread_function, (void*)&thread_data_array[i]);
        }

	    for (int j = 0; j < pthreads_size; j++)
        {
		    pthread_join(threads[j], NULL);
        }

        vtkAppendPolyData *appendWriter = vtkAppendPolyData::New();

        for(int k = 0; k < pthreads_size; k++)
        {
            vtkPolyData *inputNum = vtkPolyData::New();

            inputNum->ShallowCopy(thread_data_array[k].vtkPiece);

            #if VTK_MAJOR_VERSION <= 5
                appendWriter->AddInput(thread_data_array[k].vtkPiece);
            #else
                appendWriter->AddInputData(inputNum);
            #endif

            appendWriter->Update();
        }

        // send the vtkPolyData to the master process
        #if VTK_MAJOR_VERSION <= 5
            controller->Send(appendWriter->GetOutput(), 0, 1);
        #else
            controller->Send(appendWriter->GetOutputPort(), 0, 1);  
        #endif
    }

    if (MPI_rank == MASTER)
    {
        VT_ON();
        VT_USER_START("FINISH");

        // to append each piece into 1 big vtk file
        vtkAppendPolyData *appendWriterMASTER = vtkAppendPolyData::New();

        // go through the processes, and append
        for(int k = 1; k < MPI_size; k++)
        {
            vtkPolyData* pd = vtkPolyData::New();
            controller->Receive(pd, k, 1);

            #if VTK_MAJOR_VERSION <= 5
                appendWriterMASTER->AddInput(pd);
            #else
                appendWriterMASTER->AddInputData(pd);
            #endif

            appendWriterMASTER->Update();
        }

        vtkPolyDataWriter *pWriter = vtkPolyDataWriter::New();
        pWriter->SetFileName(argv[2]);

        #if VTK_MAJOR_VERSION <= 5
            pWriter->SetInput(appendWriterMASTER->GetOutput());
        #else
            pWriter->SetInputData(appendWriterMASTER->GetOutputPort());
        #endif

        pWriter->Write();

        VT_USER_END("FINISH");
        VT_OFF();

        double t2 = MPI_Wtime();

        double time = t2 - t1;

        printf("MPI_Wtime measured the time elapsed to be: %f\n", time);
/*
        FILE *out_file = fopen("../OutPutFile.txt", "a"); // write only 

        char strPD[6];

        sprintf(strPD, "%f \n", time);

        fprintf(out_file, strPD);
        fclose(out_file);
*/

/*
        // Remove any duplicate points.
        vtkCleanPolyData *cleanFilter = vtkCleanPolyData::New();
        cleanFilter->SetInputConnection(appendWriterMASTER->GetOutputPort());
        cleanFilter->Update();

        // Create a mapper
        vtkPolyDataMapper *cumulativeMapper = vtkPolyDataMapper::New();
        cumulativeMapper->SetInputConnection(cleanFilter->GetOutputPort());

        // Create an actor
        vtkActor *actor = vtkActor::New();
        actor->SetMapper(cumulativeMapper);

        // Create a renderer, render window, and interactor
        vtkRenderer* renderer = vtkRenderer::New();
        vtkRenderWindow *renderWindow = vtkRenderWindow::New();
        vtkRenderWindowInteractor *renderWindowInteractor = vtkRenderWindowInteractor::New();

        // Add the actors to the scene
        renderWindow->AddRenderer(renderer);
        renderWindowInteractor->SetRenderWindow(renderWindow);
        renderer->AddActor(actor);

        // Render and interact
        renderWindow->Render();
        renderWindowInteractor->Start();
*/
    }
	MPI_Finalize();

	return EXIT_SUCCESS;
}
